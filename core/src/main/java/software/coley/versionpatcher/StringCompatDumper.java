package software.coley.versionpatcher;

import org.objectweb.asm.*;

/**
 * Dumper for {@link StringCompat}.
 *
 * @author Matt Coley
 */
public class StringCompatDumper implements Opcodes {
	public static final String CLASS_NAME = "compatibility/StringCompat";
	public static final String CLASS_DESCRIPTOR = "L" + CLASS_NAME + ";";

	/**
	 * @return Bytecode of {@link StringCompat}.
	 */
	public static byte[] dump() {
		// Generated by https://plugins.jetbrains.com/plugin/5918-asm-bytecode-outline
		// Modified slightly.
		ClassWriter cw = new ClassWriter(0);
		FieldVisitor fv;
		MethodVisitor mv;
		cw.visit(V1_7, ACC_PUBLIC + ACC_FINAL + ACC_SUPER, CLASS_NAME, null, "java/lang/Object", null);
		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "TAG_ARG", "C", null, 1);
		fv.visitEnd();
		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "TAG_CONST", "C", null, 2);
		fv.visitEnd();
		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL + ACC_STATIC, "TAG_ARG_STR", "Ljava/lang/String;", null, null);
		fv.visitEnd();
		fv = cw.visitField(ACC_PRIVATE + ACC_FINAL, "list", "Ljava/util/List;", "Ljava/util/List<Ljava/lang/String;>;", null);
		fv.visitEnd();
		{
			mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(8, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(12, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitTypeInsn(NEW, "java/util/ArrayList");
			mv.visitInsn(DUP);
			mv.visitMethodInsn(INVOKESPECIAL, "java/util/ArrayList", "<init>", "()V", false);
			mv.visitFieldInsn(PUTFIELD, CLASS_NAME, "list", "Ljava/util/List;");
			mv.visitInsn(RETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitMaxs(3, 1);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(Z)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(15, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ILOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Z)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(16, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "Z", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(B)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(20, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ILOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(I)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(21, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "B", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(C)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(25, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ILOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(C)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(26, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "C", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(S)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(30, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ILOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(I)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(31, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "S", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(I)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(35, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ILOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(I)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(36, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "I", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(J)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(40, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(LLOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(J)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(41, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "J", null, l0, l2, 1);
			mv.visitMaxs(3, 3);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(D)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(45, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(DLOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(D)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(46, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "D", null, l0, l2, 1);
			mv.visitMaxs(3, 3);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(F)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(50, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(FLOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(F)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(51, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "F", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([Z)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(55, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([Z)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(56, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[Z", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([B)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(60, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([B)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(61, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[B", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([C)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(65, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([C)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(66, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[C", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([S)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(70, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([S)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(71, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[S", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([I)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(75, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([I)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(76, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[I", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([J)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(80, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([J)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(81, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[J", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([D)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(85, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([D)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(86, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[D", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([F)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(90, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([F)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(91, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[F", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "([Ljava/lang/Object;)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(95, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/Arrays", "toString", "([Ljava/lang/Object;)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(96, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "[Ljava/lang/Object;", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "insert", "(Ljava/lang/Object;)" + CLASS_DESCRIPTOR, null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(100, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(Ljava/lang/Object;)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME, "add", "(Ljava/lang/String;)V", false);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(101, l1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "Ljava/lang/Object;", null, l0, l2, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PRIVATE, "add", "(Ljava/lang/String;)V", null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(105, l0);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitFieldInsn(GETFIELD, CLASS_NAME, "list", "Ljava/util/List;");
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "add", "(ILjava/lang/Object;)V", true);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(106, l1);
			mv.visitInsn(RETURN);
			Label l2 = new Label();
			mv.visitLabel(l2);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l2, 0);
			mv.visitLocalVariable("value", "Ljava/lang/String;", null, l0, l2, 1);
			mv.visitMaxs(3, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PUBLIC, "build", "(Ljava/lang/String;)Ljava/lang/String;", null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(109, l0);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitFieldInsn(GETFIELD, CLASS_NAME, "list", "Ljava/util/List;");
			mv.visitMethodInsn(INVOKESTATIC, CLASS_NAME, "compile", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;", false);
			mv.visitInsn(ARETURN);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLocalVariable("this", CLASS_DESCRIPTOR, null, l0, l1, 0);
			mv.visitLocalVariable("pattern", "Ljava/lang/String;", null, l0, l1, 1);
			mv.visitMaxs(2, 2);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "compile", "(Ljava/lang/String;Ljava/util/List;)Ljava/lang/String;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(113, l0);
			mv.visitInsn(ICONST_0);
			mv.visitVarInsn(ISTORE, 2);
			Label l1 = new Label();
			mv.visitLabel(l1);
			mv.visitLineNumber(114, l1);
			mv.visitFrame(Opcodes.F_APPEND, 1, new Object[]{Opcodes.INTEGER}, 0, null);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ICONST_1);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(I)I", false);
			Label l2 = new Label();
			mv.visitJumpInsn(IFLT, l2);
			Label l3 = new Label();
			mv.visitLabel(l3);
			mv.visitLineNumber(115, l3);
			mv.visitVarInsn(ILOAD, 2);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "size", "()I", true);
			Label l4 = new Label();
			mv.visitJumpInsn(IF_ICMPNE, l4);
			Label l5 = new Label();
			mv.visitLabel(l5);
			mv.visitLineNumber(116, l5);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			mv.visitLabel(l4);
			mv.visitLineNumber(117, l4);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, 1);
			mv.visitVarInsn(ILOAD, 2);
			mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "get", "(I)Ljava/lang/Object;", true);
			mv.visitTypeInsn(CHECKCAST, "java/lang/String");
			mv.visitVarInsn(ASTORE, 3);
			Label l6 = new Label();
			mv.visitLabel(l6);
			mv.visitLineNumber(118, l6);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitFieldInsn(GETSTATIC, CLASS_NAME, "TAG_ARG_STR", "Ljava/lang/String;");
			mv.visitVarInsn(ALOAD, 3);
			mv.visitMethodInsn(INVOKESTATIC, "java/util/regex/Matcher", "quoteReplacement", "(Ljava/lang/String;)Ljava/lang/String;", false);
			mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "replaceFirst", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", false);
			mv.visitVarInsn(ASTORE, 0);
			Label l7 = new Label();
			mv.visitLabel(l7);
			mv.visitLineNumber(119, l7);
			mv.visitIincInsn(2, 1);
			Label l8 = new Label();
			mv.visitLabel(l8);
			mv.visitLineNumber(120, l8);
			mv.visitJumpInsn(GOTO, l1);
			mv.visitLabel(l2);
			mv.visitLineNumber(121, l2);
			mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
			mv.visitVarInsn(ALOAD, 0);
			mv.visitInsn(ARETURN);
			Label l9 = new Label();
			mv.visitLabel(l9);
			mv.visitLocalVariable("arg", "Ljava/lang/String;", null, l6, l8, 3);
			mv.visitLocalVariable("recipe", "Ljava/lang/String;", null, l0, l9, 0);
			mv.visitLocalVariable("arguments", "Ljava/util/List;", "Ljava/util/List<Ljava/lang/String;>;", l0, l9, 1);
			mv.visitLocalVariable("c", "I", null, l1, l9, 2);
			mv.visitMaxs(3, 4);
			mv.visitEnd();
		}
		{
			mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
			mv.visitCode();
			Label l0 = new Label();
			mv.visitLabel(l0);
			mv.visitLineNumber(11, l0);
			mv.visitInsn(ICONST_1);
			mv.visitFieldInsn(PUTSTATIC, CLASS_NAME, "TAG_ARG", "C");
			mv.visitFieldInsn(GETSTATIC, CLASS_NAME, "TAG_ARG", "C");
			mv.visitMethodInsn(INVOKESTATIC, "java/lang/String", "valueOf", "(C)Ljava/lang/String;", false);
			mv.visitFieldInsn(PUTSTATIC, CLASS_NAME, "TAG_ARG_STR", "Ljava/lang/String;");
			mv.visitInsn(RETURN);
			mv.visitMaxs(1, 0);
			mv.visitEnd();
		}
		cw.visitEnd();
		return cw.toByteArray();
	}
}
